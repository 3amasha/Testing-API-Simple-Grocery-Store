{
	"info": {
		"_postman_id": "7a62890a-2954-4add-a0f6-6fceb8606e28",
		"name": "Simple_Grocery_Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42160313"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate status in UP\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each product has required fields\", function () {\r",
									"    const products = pm.response.json();\r",
									"    products.forEach(product => {\r",
									"        pm.expect(product).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");\r",
									"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(product).to.have.property(\"inStock\").that.is.a(\"boolean\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"All products match requested category (if filtered)\", function () {\r",
									"    const categoryFilter = pm.request.url.query.get(\"category\"); // e.g., 'coffee'\r",
									"    if (categoryFilter) {\r",
									"        const products = pm.response.json();\r",
									"        products.forEach(product => {\r",
									"            pm.expect(product.category).to.eql(categoryFilter);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Number of results matches expected count (if provided)\", function () {\r",
									"    const resultsLimit = pm.request.url.query.get(\"results\"); // e.g., 5\r",
									"    if (resultsLimit) {\r",
									"        const products = pm.response.json();\r",
									"        pm.expect(products.length).to.be.at.most(Number(resultsLimit));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"All products match the availability filter\", function () {\r",
									"    // Get the dynamic 'available' value from collection Variables\r",
									"    const availabilityParam = pm.request.url.query.get(\"available\");\r",
									"    //const availabilityParam = pm.collectionVariables.get(\"productAvailability\");\r",
									"    // Only test if the 'available' param is provided\r",
									"    if (availabilityParam !== undefined) {\r",
									"        const expectedAvailability = (availabilityParam === \"true\"); // convert string to boolean\r",
									"\r",
									"        jsonData.forEach(product => {\r",
									"            pm.expect(product).to.have.property(\"inStock\");\r",
									"            pm.expect(product.inStock).to.eql(expectedAvailability);\r",
									"        });\r",
									"    } else {\r",
									"        console.warn(\"Availability filter not provided â€” skipping this test.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"//dynamically selecting first product\r",
									"pm.collectionVariables.set(\"productId\", jsonData[0].id);\r",
									"pm.collectionVariables.set(\"secondProductId\", jsonData[1].id);\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//To set the category (string)\r",
									"pm.collectionVariables.set(\"productCategory\", \"\");\r",
									"\r",
									"pm.collectionVariables.set(\"productAvailability\", \"true\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?category={{productCategory}}&results",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "{{productCategory}}"
								},
								{
									"key": "results",
									"value": null
								},
								{
									"key": "available",
									"value": "{{productAvailability}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"/******** Tests *********/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid product object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Product contains required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"category\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"inStock\").that.is.a(\"boolean\");\r",
									"\r",
									"    pm.expect(jsonData.manufacturer).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"    pm.expect(jsonData[\"current-stock\"]).to.be.a(\"number\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Returned productId matches request\", function () {\r",
									"    const expectedId = Number(pm.collectionVariables.get(\"productId\")); \r",
									"    pm.expect(jsonData.id).to.eql(expectedId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"productId\", 4875);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/:productId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "category",
									"value": "",
									"disabled": true
								},
								{
									"key": "results",
									"value": "",
									"disabled": true
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								},
								{
									"key": "product-label",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201 Cart created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid JSON structure\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if Cart creation flag is true\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if cartId is present and is a non-empty string\", function () {\r",
									"    pm.expect(jsonData.cartId).to.be.a('string').and.not.empty;\r",
									"});\r",
									"\r",
									"//Get Last Cart Id and store in cartId variable\r",
									"pm.collectionVariables.set(\"cartId\", jsonData.cartId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON object\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"'created' field is true after adding new item\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"created\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"'itemId' is returned and is a number after adding new item\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"itemId\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"//TODO: dynamically set cartItemId to compare it with id in Get cart items"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{productId}},\r\n  \"quantity\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:cartId/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a valid JSON object\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"'items' is an array\", function () { \r",
									"    pm.expect(jsonData).to.have.property(\"items\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"'created' is a valid ISO timestamp\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"created\").that.is.a(\"string\");\r",
									"\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.created).to.match(isoRegex);\r",
									"});\r",
									"/*\r",
									"pm.test(\"Check number of items in the cart\", function () {\r",
									"    const items = pm.response.json().items;\r",
									"    pm.expect(items.length).to.eql(0);\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:cartId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"if (jsonData.length > 0) {\r",
									"   pm.test(\"Each item has correct structure and data types\", function () {\r",
									"        jsonData.forEach(item => {\r",
									"            pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"            pm.expect(item).to.have.property(\"productId\").that.is.a(\"number\");\r",
									"            pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Save the first item ID for chaining (e.g., delete later)\r",
									"    pm.collectionVariables.set(\"cartItemId\", jsonData[0].id);\r",
									"    console.log(\"Saved cartItemId:\", jsonData[0].id);\r",
									"\r",
									"} else {\r",
									"    // If empty, log warning but donâ€™t fail the test\r",
									"    console.warn(\"Cart is currently empty.\");\r",
									"    pm.test(\"Cart is empty\", function () {\r",
									"        pm.expect(jsonData.length).to.eql(0);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/:cartId/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{cartItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Register a new API client\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{newProductId}},\r\n  \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{cartItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an Item in the Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.eql('');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Register a new API client\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{cartItemId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Authentication",
			"item": [
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains accessToken\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.have.property(\"accessToken\").that.is.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"const token = pm.response.json().accessToken;\r",
									"pm.collectionVariables.set(\"accessToken\", token);\r",
									"\r",
									"pm.collectionVariables.set(\"customerName\", requestBody.clientName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"clientName\": \"Amr Ahmed 003\",\r\n  \"clientEmail\": \"amr_ahmed_003@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api-clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'created' and 'orderId'\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"created\", true);\r",
									"    pm.expect(jsonData).to.have.property(\"orderId\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"orderId\", jsonData.orderId);\r",
									"\r",
									"console.log(\"cartId =\", pm.collectionVariables.get(\"cartId\"));\r",
									"console.log(\"customerName =\", pm.collectionVariables.get(\"customerName\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{customerName}}\"\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const expectedOrderId = pm.collectionVariables.get(\"orderId\");\r",
									"\r",
									"pm.test(\"Status is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of orders\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each order has id, customerName, created, and items\", function () {\r",
									"    jsonData.forEach(order => {\r",
									"        pm.expect(order).to.have.property(\"id\").that.is.a(\"string\");\r",
									"        pm.expect(order).to.have.property(\"customerName\").that.is.a(\"string\");\r",
									"        pm.expect(order).to.have.property(\"created\").that.is.a(\"string\");\r",
									"        pm.expect(order).to.have.property(\"items\").that.is.an(\"array\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(`Order with ID '${expectedOrderId}' exists in response`, function () {\r",
									"    const found = jsonData.some(order => order.id === expectedOrderId);\r",
									"    pm.expect(found, `Order ID ${expectedOrderId} should exist`).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const expectedOrderId = pm.collectionVariables.get(\"orderId\");\r",
									"\r",
									"pm.test(\"Status is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"pm.test(\"Order ID matches expected\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(expectedOrderId);\r",
									"});\r",
									"\r",
									"pm.test(\"Order contains required fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"customerName\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"created\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdBy\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"processed\").that.is.a(\"boolean\");\r",
									"    pm.expect(jsonData).to.have.property(\"comment\");\r",
									"});\r",
									"\r",
									"pm.test(\"Order items array is valid\", function () {\r",
									"    pm.expect(jsonData.items).to.be.an(\"array\").that.is.not.empty;\r",
									"    const firstItem = jsonData.items[0];\r",
									"    pm.expect(firstItem).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(firstItem).to.have.property(\"productId\").that.is.a(\"number\");\r",
									"    pm.expect(firstItem).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Order is not yet processed\", function () {\r",
									"    pm.expect(jsonData.processed).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw || \"{}\");\r",
									"pm.collectionVariables.set(\"customerName\", requestBody.customerName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//update customer name\r\n{\r\n \"customerName\": \"ahmed ahmed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 2000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://simple-grocery-store-api.glitch.me",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "4875",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productCategory",
			"value": "",
			"type": "string"
		},
		{
			"key": "productAvailability",
			"value": "",
			"type": "string"
		},
		{
			"key": "cartItemId",
			"value": "",
			"type": "string"
		},
		{
			"key": "newProductId",
			"value": "2585",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "customerName",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "secondProductId",
			"value": "",
			"type": "string"
		}
	]
}